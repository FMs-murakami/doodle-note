#!/usr/bin/env node

/**
 * Build script for internal documentation site
 * Processes Markdown files and generates static HTML pages
 */

const fs = require('fs-extra');
const path = require('path');
const yaml = require('js-yaml');
const { loadConfig, groupPagesByCategory, getCategories, flattenPages } = require('./config');
const { convertMarkdown } = require('./markdown');
const outputDir = process.env.OUTPUT_DIR || 'dist';

/**
 * Generate config.json from config.yaml for client-side consumption
 */
async function generateConfigJson(config) {
  console.log('⚙️  Generating config.json from config.yaml...');
  
  // Ensure config directory exists in output
  const configDir = path.join(outputDir, 'config');
  await fs.ensureDir(configDir);
  
  // Write config.json with the loaded configuration
  const configJsonPath = path.join(configDir, 'config.json');
  await fs.writeJson(configJsonPath, config, { spaces: 2 });
  
  console.log('✅ Generated config.json for client-side consumption');
}

/**
 * Copy static files to dist directory
 */
async function copyStaticFiles() {
  console.log('📁 Copying static assets...');
  
  // Copy assets directory
  if (await fs.pathExists('assets')) {
    await fs.copy('assets', path.join(outputDir, 'assets'));
  }
  
  // Copy docs directory (for images and other assets)
  if (await fs.pathExists('docs')) {
    await fs.copy('docs', path.join(outputDir, 'docs'));
  }
  
  // Note: config directory is handled separately by generateConfigJson()
  // to convert YAML to JSON for client-side consumption
  
  // Copy favicon if it exists
  if (await fs.pathExists('favicon.ico')) {
    await fs.copy('favicon.ico', path.join(outputDir, 'favicon.ico'));
  }
  
  // Copy any additional static files
  const staticFiles = ['robots.txt', '.nojekyll'];
  for (const file of staticFiles) {
    if (await fs.pathExists(file)) {
      await fs.copy(file, path.join(outputDir, file));
    }
  }
}

/**
 * Generate index page HTML with sidebar and header layout
 */
async function generateIndex(config) {
  console.log('📄 Generating index page...');
  
  const { generateEnhancedSidebar } = require('./sidebar');
  const sidebarHtml = generateEnhancedSidebar(config, null, true);
  
  let indexHtml = `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${config.site.title}</title>
    <meta name="description" content="${config.site.description}">
    
    <!-- CSS -->
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css">
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="assets/favicon.ico">
</head>
<body>
    <!-- Header -->
    <header class="site-header">
        <div class="container">
            <div class="header-content">
                <h1 class="site-title">
                    <a href="index.html">${config.site.title}</a>
                </h1>
                <p class="site-description">${config.site.description}</p>
            </div>
            <nav class="header-nav">
                <a href="index.html" class="nav-link">ホーム</a>
                <a href="#" class="nav-link" onclick="toggleSidebar()">メニュー</a>
            </nav>
        </div>
    </header>

    <!-- Main Layout -->
    <div class="main-layout">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>ドキュメント一覧</h2>
                <button class="sidebar-close" onclick="toggleSidebar()">&times;</button>
            </div>
            <div class="sidebar-content">
                ${sidebarHtml}
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content-wrapper">
                <!-- Page Content -->
                <article class="page-content">
                    <div class="content-area">
                        <div class="index-content">
                            <div class="welcome-section">
                                <h2>社内技術文書管理システム</h2>
                                <p>左側のサイドバーから各ドキュメントにアクセスできます。検索機能を使用してページタイトルで絞り込むことも可能です。</p>
                            </div>
                            
                            <div class="pages-grid" id="pages-grid">
                                <!-- Pages will be generated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </article>
            </div>
        </main>
    </div>

    <!-- Footer -->
    <footer class="site-footer">
        <div class="container">
            <div class="footer-content">
                <p>&copy; ${new Date().getFullYear()} ${config.site.title}. All rights reserved.</p>
                <p class="footer-note">社内向け技術文書管理システム</p>
            </div>
        </div>
    </footer>

    <!-- JavaScript -->
    <script src="assets/js/main.js"></script>
    <script src="assets/js/sidebar.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script>
        // Initialize syntax highlighting
        hljs.highlightAll();
    </script>
</body>
</html>`;

  await fs.writeFile(path.join(outputDir, 'index.html'), indexHtml);
}

/**
 * Generate category-specific index pages for hierarchical navigation
 */
async function generateCategoryIndexes(config) {
  console.log('📑 Generating category index pages...');
  
  const { generateEnhancedSidebar, generateCategoryUrl } = require('./sidebar');
  const { getCategoryContents } = require('./config');
  
  // Get all possible category paths
  const categoryPaths = getAllCategoryPaths(config.pages);
  
  for (const categoryPath of categoryPaths) {
    const categoryContents = getCategoryContents(config.pages, categoryPath);
    const sidebarHtml = generateEnhancedSidebar(config, null, true);
    
    // Generate category title and breadcrumb
    const categoryTitle = categoryPath.length > 0 ? categoryPath.join(' / ') : 'すべて';
    const categorySlug = categoryPath.join('-').toLowerCase().replace(/[^a-z0-9\-]/g, '-');
    
    // Generate category-specific content
    const { getPageUrl } = require('./sidebar');
    
    let categoryContent = '';
    
    // Add subcategories section
    if (categoryContents.subcategories.length > 0) {
      categoryContent += '<div class="subcategories-section">\n';
      categoryContent += '<h3>サブカテゴリ</h3>\n';
      categoryContent += '<div class="subcategories-grid">\n';
      
      categoryContents.subcategories.forEach(subcat => {
        const subcatPath = [...categoryPath, subcat.category];
        const subcatUrl = generateCategoryUrl(subcatPath, config.site.baseUrl || '/');
        categoryContent += `
          <div class="category-card">
            <h4><a href="${subcatUrl}">${subcat.category}</a></h4>
            <p class="category-count">${subcat.pageCount}件のドキュメント</p>
          </div>
        `;
      });
      
      categoryContent += '</div>\n';
      categoryContent += '</div>\n';
    }
    
    // Add pages section
    if (categoryContents.pages.length > 0) {
      categoryContent += '<div class="pages-section">\n';
      categoryContent += '<h3>ドキュメント</h3>\n';
      categoryContent += '<div class="pages-grid">\n';
      
      categoryContents.pages.forEach(page => {
        const pageUrl = getPageUrl(page, '', config);
        categoryContent += `
          <div class="page-card">
            <h4><a href="/doodle-note/${pageUrl}">${page.title}</a></h4>
            <p class="page-path">${page.path}</p>
          </div>
        `;
      });
      
      categoryContent += '</div>\n';
      categoryContent += '</div>\n';
    }
    
    // Generate breadcrumb for category page
    let breadcrumbHtml = '<nav class="breadcrumb" aria-label="パンくずナビゲーション">\n';
    const baseUrl = config.site.baseUrl || '/';
    const indexPath = baseUrl + 'index.html';
    breadcrumbHtml += `  <a href="${indexPath}">ホーム</a>\n`;
    
    for (let i = 0; i < categoryPath.length; i++) {
      const partialPath = categoryPath.slice(0, i + 1);
      const isLast = i === categoryPath.length - 1;
      
      breadcrumbHtml += '  <span class="breadcrumb-separator" aria-hidden="true">/</span>\n';
      
      if (isLast) {
        breadcrumbHtml += `  <span class="breadcrumb-current" aria-current="page">${categoryPath[i]}</span>\n`;
      } else {
        const partialUrl = generateCategoryUrl(partialPath, baseUrl);
        breadcrumbHtml += `  <a href="${partialUrl}">${categoryPath[i]}</a>\n`;
      }
    }
    
    breadcrumbHtml += '</nav>\n';
    
    const categoryIndexHtml = `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${categoryTitle} - ${config.site.title}</title>
    <meta name="description" content="${config.site.description}">
    
    <!-- CSS -->
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css">
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="assets/favicon.ico">
</head>
<body>
    <!-- Header -->
    <header class="site-header">
        <div class="container">
            <div class="header-content">
                <h1 class="site-title">
                    <a href="index.html">${config.site.title}</a>
                </h1>
                <p class="site-description">${config.site.description}</p>
            </div>
            <nav class="header-nav">
                <a href="index.html" class="nav-link">ホーム</a>
                <a href="#" class="nav-link" onclick="toggleSidebar()">メニュー</a>
            </nav>
        </div>
    </header>

    <!-- Main Layout -->
    <div class="main-layout">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>ドキュメント一覧</h2>
                <button class="sidebar-close" onclick="toggleSidebar()">&times;</button>
            </div>
            <div class="sidebar-content">
                ${sidebarHtml}
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content-wrapper">
                <!-- Breadcrumb -->
                ${breadcrumbHtml}

                <!-- Page Content -->
                <article class="page-content">
                    <header class="page-header">
                        <h1 class="page-title">${categoryTitle}</h1>
                    </header>
                    <div class="content-area">
                        <div class="category-content">
                            ${categoryContent}
                        </div>
                    </div>
                </article>

                <!-- Page Navigation -->
                <nav class="page-navigation">
                    <a href="index.html" class="nav-button nav-button-back">
                        ← ドキュメント一覧に戻る
                    </a>
                </nav>
            </div>
        </main>
    </div>

    <!-- JavaScript -->
    <script src="assets/js/main.js"></script>
    <script src="assets/js/sidebar.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script>
        // Initialize syntax highlighting
        hljs.highlightAll();
    </script>
</body>
</html>`;

    // Save category index page
    const categoryFileName = categoryPath.length > 0 
      ? `category-${categorySlug}.html`
      : 'category-all.html';
    
    await fs.writeFile(path.join(outputDir, categoryFileName), categoryIndexHtml);
    console.log(`✅ Generated category index: ${categoryFileName} (${categoryTitle})`);
  }
}

/**
 * Get all possible category paths from hierarchical structure
 * @param {Array} pages - Hierarchical pages array
 * @returns {Array} Array of category path arrays
 */
function getAllCategoryPaths(pages) {
  const paths = [];
  
  function extractPaths(pageArray, currentPath = []) {
    // Add current path if it's not empty (root level)
    if (currentPath.length > 0) {
      paths.push([...currentPath]);
    }
    
    for (const item of pageArray) {
      if (item.category && item.pages) {
        const newPath = [...currentPath, item.category];
        extractPaths(item.pages, newPath);
      }
    }
  }
  
  extractPaths(pages);
  return paths;
}

/**
 * Main build function
 */
async function build() {
  console.log('🚀 Starting build process...');
  
  try {
    // 1. Clean up output directory
    console.log('🧹 Cleaning output directory...');
    await fs.emptyDir(outputDir);
    
    // 2. Load configuration
    console.log('⚙️  Loading configuration...');
    const config = await loadConfig();
    
    // 3. Generate config.json for client-side consumption
    await generateConfigJson(config);
    
    // 4. Flatten hierarchical pages structure
    const flatPages = flattenPages(config.pages);
    
    // 5. Group pages by category
    const groupedPages = groupPagesByCategory(config.pages);
    
    // 6. Process each page
    console.log('📝 Processing markdown files...');
    for (const page of flatPages) {
      try {
        const htmlContent = await convertMarkdown(page, config, groupedPages);
        
        // Save processed HTML
        const outputPath = path.join(outputDir, page.path.replace('.md', '.html'));
        await fs.ensureDir(path.dirname(outputPath));
        await fs.writeFile(outputPath, htmlContent);
        
        console.log(`✅ Processed: ${page.path} -> ${outputPath}`);
      } catch (error) {
        console.error(`❌ Failed to process ${page.path}:`, error.message);
      }
    }
    
    // 7. Copy static files
    await copyStaticFiles();
    
    // 8. Generate index page
    await generateIndex(config);
    
    // 9. Generate category index pages
    await generateCategoryIndexes(config);
    
    console.log('🎉 Build completed successfully!');
    console.log('📂 Output directory: ./dist');
    console.log(`📊 Processed ${flatPages.length} pages`);
    
  } catch (error) {
    console.error('❌ Build failed:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Run build if this script is executed directly
if (require.main === module) {
  build();
}

module.exports = { build, copyStaticFiles, generateIndex, generateCategoryIndexes, generateConfigJson };